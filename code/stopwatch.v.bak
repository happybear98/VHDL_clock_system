module stopwatch(
	input clk,
	input rst,
	input wire en_stop,
	input wire [4:0] sw,
	input wire [2:0] set_stop,
	output reg	stop,
	output wire [15:0] bcd_stop_hour,
	output wire [15:0] bcd_stop_min,
	output wire [15:0] bcd_stop_sec);
	
	reg [4:0]hour;	
	reg [5:0]min;
	reg [5:0]sec;
	
	bin2bcd #(.BINARY_LENGTH(4)) BCD_STOP_HOUR (
	/* input [BINARY_LENGTH-1:0]	*/ .binary(hour),		// 2진수
	/* output [NUM_OF_DIGIT*4-1:0]  */ .bcd(bcd_stop_hour)); 	    // bcd 결과
		 
	bin2bcd #(.BINARY_LENGTH(5)) BCD_STOP_MIN (
	/* input [BINARY_LENGTH-1:0]	*/ .binary(min),		// 2진수
	/* output [NUM_OF_DIGIT*4-1:0]  */ .bcd(bcd_stop_min)); 	    // bcd 결과
		 
		 
	bin2bcd #(.BINARY_LENGTH(5)) BCD_STOP_SEC (
	/* input [BINARY_LENGTH-1:0]	*/ .binary(sec),		// 2진수
	/* output [NUM_OF_DIGIT*4-1:0]  */ .bcd(bcd_stop_sec)); 	    // bcd 결과
	
	
   always @ (posedge clk or negedge rst) begin
   
      if(!rst)
         stop <= 0;
			
		else if(set_stop)
		
			if (sw[1])
			
				if(stop == 0) 
					stop <= 1;
				else if(stop == 1)
					stop <= 0;
   end

	always @ (posedge clk or negedge rst) begin
		
		if(!rst) begin
			hour <= 0;
			min <= 0;
			sec <= 0;	
		end			
		
		else if(stop == 1) begin
		
			if(en_stop) begin
				casez({hour, min, sec})
		
					{5'd23, 6'd59, 6'd59} : begin
						hour <= 0;
						min <= 0;
						sec <= 0;
						
					end
			
					{5'd?, 6'd59, 6'd59} : begin
						hour <= hour + 1'd1;
						min <=0;
						sec <=0;
					end
				
					{5'd?, 6'd?, 6'd59} : begin
			
						hour <= hour;
						min <= min +1'd1;
						sec <= 0;
					end
			
					default : begin
						hour <= hour;
						min <= min;
						sec <= sec + 1'd1;
					end
				endcase
			end
		end
		
		else if(sw[2]) begin
			hour <= 0;
			min <= 0;
			sec <= 0;
		end	
	end

endmodule